#!/bin/bash
# Author = Vamsi krishna
# JIRA - https://jira.marinsoftware.com/browse/DBOPS-8792
# Wiki - https://wiki.marinsw.net/w/Ops:DB:Alumni_Audit
# This script gets a list of users de-activated from Active Directory and drops them from marin search 1.0 MariaDB databases
# Version: 1.0

# Functions
usage () {
	[[ -z $1 ]] && echo "$1"
cat << EOF
	This script gets a list of users de-activated from Active Directory and drops them from marin search 1.0 MariaDB databases

        Optional:
        =============
		- r : This has to be specified to drop the users from the database, else does a dry run.

		- h : Prints this usage.

	example:
	=============

		1 ) Gets a report of former employees that still have database access
			./$(basename $0)

		2 ) Drops the user accounts of former employees from the search 1.0 MariaDB database
			./$(basename $0) -r
EOF
exit 1
}

log () {
	echo -e "[`date +'%Y-%m-%d %H:%M:%S'`]: $1" | tee -a $LOGFILE
}

exit_as () {
	log "$1" >> $errorFile
	error_checker
	exit 1
}

getAdHosts() {
	log "Getting a list of Active directory hosts..."
	
	adHosts=$(dig $domain | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | sort | uniq | while read ip;do host $ip; done | grep -iv "not found" | grep -i lvad | awk '{print $5}')
	adHostsCount=$(echo $adHosts | wc -w)

	if [[ $adHostsCount -eq 0 ]];then
		exit_as "ERROR: No Active Directory hosts found. Exiting..."
	else
		log "Total hosts found are $adHostsCount"
	fi
}

getDeactivedAccounts() {
	try=1
	while [[ $try -le $adHostsCount ]]; do
		
		host=$(echo $adHosts | cut -f $try -d' ' | sed 's/.$//g')
		log "Attempting to get a list of deactivated accounts from [$host]"
		deactivatedAccounts=$(ldapSearch $host)

		exit_val=$?
		if [[ $exit_val -eq 0 ]];then
			parsedAccounts=$(grep 'sAMAccountName:' $workFile | egrep -vw "$exemptUsers" | cut -f2 -d' ')
			deactivatedAccountsCount=$(echo $parsedAccounts | wc -w)
			log "Total deactived accounts are $deactivatedAccountsCount"
			break
		elif [[ $exit_val -ne 0 ]] && [[ $try -lt $adHostsCount ]];then
			[[ -s $errorFile ]] && log "ERROR: `cat $errorFile`" && rm $errorFile
			log "Attempt failed. Will be trying with the next one if any left"
			try=$(($try+1))
		elif [[ $exit_val -ne 0 ]] && [[ $try -eq $adHostsCount ]];then
			[[ -s $errorFile ]] && log "ERROR: `cat $errorFile`" && rm $errorFile
			exit_as "All attempts failed. Exiting..."
		fi
	done
}

ldapSearch() {
ldapsearch -x -h $1 -D "CN=$ldapUser,CN=Service Accounts,DC=global,DC=marinsoftware,DC=com" -w "$ldapPasswd" -b "ou=Disabled users,dc=global,dc=marinsoftware,dc=com" -s sub "(cn=*)" sAMAccountName 1>$workFile 2>$errorFile
}

getAccounts() {
	log "Checking for accounts that can be revoked access..."
	for account in $parsedAccounts;do
		RunOnProd "SELECT user, host FROM mysql.user WHERE user='$account'" 1> userExists.txt 2>errors.txt
		errorCount=`grep -icw 'error' errors.txt`
			if [[ $errorCount -gt 0 ]];then
				cat errors.txt >> $errorFile
				log "Could not pull information about the user [$account]. Contuning..." && continue
			fi

                        if [[ -s userExists.txt ]];then
				log "Updating ${meta_db}.${meta_table} for user [$account]."
                        	$myconn -e"INSERT INTO ${meta_table} (ldap,object_version,status) VALUES ('$account',now(),0)"
				[[ $? -ne 0 ]] && exit_as "Table ${meta_db}.${meta_table} could not be updated. Exiting..."
			else
                                continue
                        fi
		rm userExists.txt errors.txt
	done
}

sendMail() {
	local SQL="SELECT ldap from ${meta_db}.${meta_table} WHERE status=0"
	new_date=$(date -d "$(date +%Y-%m-%d) 7 days" +%Y-%m-%d)
	echo -e "The following users will be deleted from marin search 1.0 databases in one week on [${new_date}]. \nPlease take necessary action if required.\nwiki link: https://wiki.marinsw.net/w/Alumni_audit" >> body.txt
	$myconn -te"$SQL" 1>> body.txt 2>>$errorFile
	local exit_status=$?
	if [[ $exit_status -ne 0 ]];then
		log "Could not pull report from [${meta_db}.${meta_table}]. Continuing..."
	elif [[ $exit_status -eq 0 ]] && [[ `cat body.txt | wc -l` -gt 3 ]];then
		log "Generating a mail report to dbops@marinsoftware.com"
		cat body.txt | mail -s "Alumni audit report [`date +%Y-%m-%d`]" dbops@marinsoftware.com
		rm body.txt
	elif [[ $exit_status -eq 0 ]] && [[ `cat body.txt | wc -l` -lt 4 ]];then
		log "No users to be deleted. Not generating a report."
	fi
}

deleteAccounts() {
	log "Obtaining a list of users to be deleted..."
	local SELECT_SQL="SELECT DISTINCT ldap from ${db}.${table} WHERE status=0 AND object_version < date_sub(now(), interval 7 day)"
	usersToDelete=$($myconn -ANBe"${SELECT_SQL}")
	local exit_status=$?
	
	if [[ $exit_status -ne 0 ]];then
		log "Could not pull list of users from [${meta_host}.${meta_db}.${meta_table}]. Exiting..."
		exit 1
	fi
	
	if [[ `echo $usersToDelete | wc -w` -gt 0 ]];then
		for user in $usersToDelete;do
			log "User [$user] still has grants. Dropping..."
			$deleteUserScript -u "$user" -p "$env"
			local quit_status=$?
				if [[ $quit_status -ne 0 ]];then
					log "User [$user] could not be dropped. Skipping..." && continue
				else
					local UPDATE_SQL="UPDATE ${meta_db}.${meta_table} SET status=1, object_version=now() WHERE ldap='$user'"
					$myconn -e"${UPDATE_SQL}"
					[[ $? -ne 0 ]] && log "Could not update [${meta_db}.${meta_table}] for [$user]. Continuing..." && continue
				fi
		done

	else
		log "No users to drop. All good."

	fi
}


error_checker() {
	local errors=$(grep -icw error $errorFile)
	if [[ -s $errorFile ]];then
		log "Found $errors errors. Creating JIRA."
		cat $errorFile | mail -r dbopsjira@marinsoftware.com -s "[date +%Y-%m-%d]: alumni_audit.sh" dbopsjira@marinsoftware.com
		return 1
	else
		log "No errors found. Run completed successfully."
	fi
}


# Variables
deleteUserScript="/usr/local/dbops/scripts/bin/delete_user.sh"
dbinfo="/usr/local/marin/ops/apptools/scripts/dbinfo.sh"
ldapUser="DB Ops LDAP"
ldapPasswd="{{ DBOPS_LDAPREADER_PWD }}"
domain="global.marinsoftware.com"
exemptUsers="marin|pruner|root|backup|dbops_ro|slave"
LOGFILE="/var/log/dbops/alumni_audit.log"
workFile="/var/log/dbops/alumni_audit_`date +%Y%m%d`.txt"
errorFile="/var/log/dbops/alumni_audit_error_`date +%Y%m%d`.txt"
CNF="~/.my.cnf"
meta_db="dbops"
meta_table="alumni_audit"
{% if ENV == 'PROD' %}
meta_host="dbactl-lv-1"
env="production"
{% else %}
meta_host="labs-dbactl-lv-101"
env="qa2"
{% endif %}
run=0

while getopts ":rh" options;do

	case ${options} in
		r) run=1 ;;
		h) usage "Here are the usage options for this script" ;;
		*) usage "ERROR: Unknown options specified" ;;
	esac

done

# Validations
[[ $run -ne 1 ]] && log "This is going to be a dry run. No users will be dropped..."
[[ ! -f $deleteUserScript ]] && usage "ERROR: Script [$deleteUserScript] is not found. Exiting..."
[[ ! -f $dbinfo ]] && usage "ERROR: Script [$dbinfo] is not found. Exiting..."
[[ -z $CNF ]] && usgae "ERROR: Config file [$CNF] is not found. Exiting..."

which ldapsearch > /dev/null 2>&1
[[ $? -ne 0 ]] && usage "ERROR: ldapsearch is not installed. Exiting..."

# Variables Computed
meta_user=$(my_print_defaults --defaults-file=$CNF clientpruner | grep -i user | cut -f2 -d'=')
meta_pass=$(my_print_defaults --defaults-file=$CNF clientpruner | grep -i password | cut -f2 -d'=')
[[ -z $SUPER_USER ]] || [[ -z $DB_PASS ]] && usage "ERROR - Pruner user credentials are missing. Exiting..."
myconn="mysql -u${meta_user} -p${meta_pass} -h${meta_host} -D${meta_db}"

# Source necessary scripts
source $dbinfo

# main Code
getAdHosts
getDeactivedAccounts
getAccounts
sendMail
[[ $run -eq 1 ]] && deleteAccounts
error_checker
[[ $? -eq 1 ]] && log "Please check the JIRA created and take necessary action."
exit 0
